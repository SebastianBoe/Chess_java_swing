package Utilities;

import java.util.ArrayList;
import java.util.Iterator;

import Pieces.Piece;

import chess.Chessboard;

/*
 * Kravspesifikasjoner:
 * skal kunne legge til et row og column verdi i samme funksjon
 * addCoords(int row, int column)
 * skal kunne hente ut et row coordinat på en gitt index
 * skal kunne hente ut et y coordinat på en gitt index
 * getRowAt(int index)
 * getColumnAt(int index)
 * skal kunne sjekke om den har en gitt row, column par
 * boolean contains(int row, int column)
 * skal kunne returnere hvorvidt den har noen plasser
 * boolean isEmpty()
 * skal kunne returnere antall row-column par den inneholder
 * int getNumberOfCoords()
 * skal ikke kunne ha 2 like coordinat par
 * 
 */

/*
 * Hvordan skal så dette gjøres?
 * bruk av 2 arrayLists kan gjøre jobben lett
 * bruker Integer classen istdenfor int datatypen
 * fordi ArrayList kan ikke jobbe med int
 * v.2.0 nå bruker den en  klasse som heter coordinates, er praktisk.
 */

/**
 * A class used to store 2 dimensjonal coordinates, or any two numbers that 
 * are related.
 */
public class SetOf2dCoords implements Iterable<Coordinate>
{
	private ArrayList<Coordinate> coordinates = new ArrayList<Coordinate>();
	
	public void addList(SetOf2dCoords list)
	{
		for (int i = 0; i < list.size(); i++)
		{
			addCoordinate(list.getCoordinateAt(i));
		}
	}
	
	public void addCoordinate(Coordinate coordinate)
	{
		if(!this.contains(coordinate))
			coordinates.add(coordinate);			
	}
	
	public void addCoordinate(int row, int column)
	{
		addCoordinate(new Coordinate(row, column));
	}
	
	public int getRowAt(int index)
	{
		return getCoordinateAt(index).getRow();
	}
	
	public int getColumnAt(int index)
	{
		return getCoordinateAt(index).getColumn();
	}
	
	public boolean containsAPieceOfColor(boolean white)
	{
		for (int i = 0; i < coordinates.size(); i++)
		{
			Piece piece = Chessboard.getPieceAt(coordinates.get(i));
			if(piece != null && piece.isColor(white))
				return true;
		}
		return false;
	}
	
	public int size()
	{
		return coordinates.size();
	}
	
	public void clear()
	{
		coordinates = new ArrayList<Coordinate>();
	}
	
	public boolean contains(Coordinate coordinate)
	{
		for (int i = 0; i < coordinates.size(); i++)
		{
			if(coordinate.equals(coordinates.get(i)))
				return true;
		}
		return false;
	}
	
	public boolean contains(ChessMove move)
	{
		return contains(move.getToCoordinate());
	}
	
	public boolean isEmpty()
	{
		return size() == 0;
	}
	
	@Override
	public String toString()
	{
		if(isEmpty())
			return "Empty";
		
		String s = "";
		for (int i = 0; i < size(); i++) 
		{
			s += coordinates.get(i) + "	";
		}
		return s;
	}
	
	public Coordinate getCoordinateAt(int index)
	{
		return coordinates.get(index);
	}

	@Override
	public Iterator<Coordinate> iterator() 
	{
		return coordinates.iterator();
	}
	
}